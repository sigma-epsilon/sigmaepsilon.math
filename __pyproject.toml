[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "sigmaepsilon.math"
version = "1.1.0"
description = "A Python Library for Applied Mathematics in Physical Sciences."
classifiers=[
        "Development Status :: 5 - Production/Stable",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3 :: Only",
        "Operating System :: OS Independent",
]
readme = "README.md"
authors = ["Bence Balogh <bencebalogh@sigmaepsilon.com>"]
maintainers = ["Bence Balogh <bencebalogh@sigmaepsilon.com>"]
license = "MIT"
keywords = [
    "engineering", "mathematics", "optimization", "vector", "tensor", 
    "vector algebra", "tensor algebra", "symbolic mathematics", 
    "nonlinear optimization"
]
homepage = "https://github.com/sigma-epsilon/sigmaepsilon.math"
repository = "https://github.com/sigma-epsilon/sigmaepsilon.math"
documentation = "https://sigmaepsilonmath.readthedocs.io/en/latest/?badge=latest"
packages = [{ include = "sigmaepsilon.math", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.7,<3.11"
sigmaepsilon.core = ">=1.1.1"
sigmaepsilon.deepdict = ">=1.2.2"
numba = ">=0.56.4"
numpy = ">=1.23.5"
scipy = ">=1.9.3"
awkward = ">=2.0.8"
sympy = ">=1.11.1"
pydantic = ">=2.0.2"
joblib = "*"
networkx = { version = "*", optional = true }

[tool.poetry.group.dev.dependencies]
ipython = "*"

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
coverage = "4.4.2"
networkx = "*"
flake8 = "*"

[tool.poetry.group.docs.dependencies]
ipython = "*" 
myst_parser = "*"
nbsphinx = "*"
sphinx-gallery = "*"
sphinx_copybutton = "*"
sphinxcontrib-bibtex = "*"
nbsphinx-link = "*"
sphinxcontrib-svg2pdfconverter = "*"
sphinx_design = "*"
sphinx-inline-tabs = "*"
pydata-sphinx-theme = "*"
networkx = "*"
plotly = "*"

[tool.poetry.extras]
graph = ["networkx"]
